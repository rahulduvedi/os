package:
  name: flannel
  version: "0.26.5"
  epoch: 4
  description: flannel is a network fabric for containers, designed for Kubernetes
  copyright:
    - license: Apache-2.0

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - go

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/flannel-io/flannel
      tag: v${{package.version}}
      expected-commit: 0d1f8e28f5a6697629c7b39627b342ac48f09862

  - uses: go/bump
    with:
      deps: |-
        golang.org/x/oauth2@v0.27.0
        golang.org/x/crypto@v0.35.0
        golang.org/x/net@v0.36.0

  - uses: go/build
    with:
      packages: "."
      output: "flanneld"
      ldflags: "-extldflags '-static' -X github.com/flannel-io/flannel/pkg/version.Version=${{package.version}}"

  - runs: |
      if [ "$(go env GOARCH)" = "amd64" ]; then
        export CGO_ENABLED=1
      else
        export CGO_ENABLED=0
      fi

update:
  enabled: true
  github:
    identifier: flannel-io/flannel
    strip-prefix: v

test:
  environment:
    contents:
      packages:
        - ${{package.name}}
        - etcd
        - jq
        - iproute2
  pipeline:
    - name: "Custom test for flanneld"
      runs: |
        # check version
        flanneld --version
        # Start etcd in background with proper networking configuration
        mkdir -p /tmp/etcd-data
        etcd --data-dir=/tmp/etcd-data \
          --listen-client-urls=http://127.0.0.1:2379 \
          --advertise-client-urls=http://127.0.0.1:2379 > /tmp/etcd.log 2>&1 &
        ETCD_PID=$!

        # Cleanup function
        cleanup() {
          # Kill etcd if it's still running
          if [ -n "$ETCD_PID" ] && kill -0 $ETCD_PID 2>/dev/null; then
            echo "Cleaning up etcd (PID: $ETCD_PID)"
            kill $ETCD_PID || true
          fi
        }

        trap cleanup EXIT

        # Check etcd is ready before proceeding
        for i in 1 2 3 4 5; do
          if etcdctl --endpoints=http://127.0.0.1:2379 endpoint status --write-out=table; then
            break
          fi
          sleep 1
        done

        # Store flannel network config in etcd
        printf "{\"Network\": \"10.244.0.0/16\", \"Backend\": {\"Type\": \"host-gw\"}}" > /tmp/flannel-config.json
        etcdctl --endpoints=http://127.0.0.1:2379 put /coreos.com/network/config "$(cat /tmp/flannel-config.json)"

        # Detect the default interface with fallback to eth0
        IFACE=$(ip -o -4 route show to default | awk '{print $5}' 2>/dev/null || echo "eth0")
        echo "Using network interface: $IFACE"

        # Run flanneld in background
        flanneld --etcd-endpoints=http://127.0.0.1:2379 --iface=$IFACE --iptables-forward-rules=false > /tmp/flannel.log 2>&1 &
        FLANNEL_PID=$!

        # Wait for subnet file
        success=false
        for i in $(seq 1 10); do
          if [ -f /run/flannel/subnet.env ]; then
            success=true
            break
          fi
          sleep 1
        done

        # Kill flanneld
        if [ -n "$FLANNEL_PID" ] && kill -0 $FLANNEL_PID 2>/dev/null; then
          kill $FLANNEL_PID || true
        fi

        if [ "$success" = true ]; then
          echo "✅ Test passed: Flannel created subnet configuration file"
          cat /run/flannel/subnet.env

          # Verify subnet lease in etcd
          echo "Checking subnet leases in etcd"
          LEASE_KEYS=$(etcdctl --endpoints=http://127.0.0.1:2379 get /coreos.com/network/subnets --prefix --keys-only || echo "No leases found")
          echo "$LEASE_KEYS"

          echo "Test completed successfully"
          exit 0
        else
          echo "❌ Test failed: Subnet file not created within timeout period"
          echo "Flannel logs:"
          cat /tmp/flannel.log
          exit 1
        fi
